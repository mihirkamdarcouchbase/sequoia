# rebalance the cluster
# $0 = optional orchestrator node
-
  name: rebalance
  actions:
    -
      image: sequoiatools/couchbase-cli
      command:  "rebalance
                -c {{if gt (len `$0`) 2}}$0{{else}}{{.Orchestrator}}{{end}}:{{.RestPort}}
                -u  {{.RestUsername}} -p  {{.RestPassword}}"
      condwait: "{{if eq `windows` .Platform }}
                    false
                 {{end}}"
    -
      # windows requires special status watching
      requires: "{{ eq `windows` .Platform}}"
      template: wait_for_rebalance
      args: "$0"

# rebalance out a single node
# $0 = server to remove
-
  name: rebalance_out
  actions:
    -
      image: sequoiatools/couchbase-cli
      command: "rebalance -c  {{.Orchestrator}}:{{.RestPort}} --server-remove $0  -u  {{.RestUsername}} -p  {{.RestPassword}}"
      condwait: "{{if eq `windows` .Platform }}
                    false
                 {{end}}"
    -
      # windows requires special status watching
      requires: "{{ eq `windows` .Platform}}"
      template: wait_for_rebalance

# rebalance in a single node
# $0 = server to add
-
  name: rebalance_in
  actions:
    -
      image: sequoiatools/couchbase-cli
      command: "server-add -c  {{.Orchestrator}}:{{.RestPort}}
           --server-add $0:{{.RestPort}}
           -u  {{.RestUsername}} -p  {{.RestPassword}}
           --server-add-username {{.RestUsername}} --server-add-password  {{.RestPassword}}"
      wait: true
    -
      template: rebalance

# add a node to cluster
# $0 server to add
# $1 node services
# $2 optional orchestrator
-
  name: add_node
  actions:
    -
      image: sequoiatools/couchbase-cli
      command: "server-add
           -c {{if gt (len `$2`) 2}}$2{{else}}{{.Orchestrator}}{{end}}:{{.RestPort}}
           --server-add $0:{{.RestPort}}
           -u {{.RestUsername}} -p {{.RestPassword}}
           --server-add-username {{.RestUsername}} --server-add-password {{.RestPassword}}
           {{if ge .Version 4.0}}--services $1{{end}}"
      wait: true

# swap rebalance 1x1 node
# $0 server to add
# $1 server to remove
-
  name: rebalance_swap
  actions:
    -
      image: sequoiatools/couchbase-cli
      command: "server-add -c  {{.Orchestrator}}:{{.RestPort}}
           --server-add $0:{{.RestPort}}
           -u  {{.RestUsername}} -p  {{.RestPassword}}
           --server-add-username {{.RestUsername}} --server-add-password  {{.RestPassword}}"
      wait: true
    -
      image: sequoiatools/couchbase-cli
      command:  "rebalance -c  {{.Orchestrator}}:{{.RestPort}}
        --server-remove $1:{{.RestPort}}
        -u  {{.RestUsername}} -p  {{.RestPassword}}"
    -
      # windows requires special status watching
      requires: "{{ eq `windows` .Platform}}"
      template: wait_for_rebalance

# waits for any current rebalance to finish
# receives optional orchestrator arg from callee
-
  name: wait_for_rebalance
  actions:
    -
      image: appropriate/curl
      command: "-s -u {{.RestUsername}}:{{.RestPassword}}
                 {{if gt (len `$0`) 2}}$0{{else}}{{.Orchestrator}}{{end}}:8091/pools/default/rebalanceProgress"
      repeat: -1
      until: "{{if .AllLogs `__self__`}}
                {{with $sample:=(.TailLogs `__self__` 1 | json)}}
                  {{eq `none` $sample.status}}
                {{else}}
                  {{false}}
                {{end}}
              {{else}}
                {{false}}
              {{end}}"

# waits for current rebalance to finish on the cluster by IP
-
  name: wait_for_rebalance_by_ip
  actions:
    -
      image: appropriate/curl
      command: "-s -u {{.RestUsername}}:{{.RestPassword}} $0:8091/pools/default/rebalanceProgress"
      repeat: -1
      until: "{{if .AllLogs `__self__`}}{{eq `none` (.TailLogs `__self__` 1 | json).status}}{{else}}{{false}}{{end}}"
      wait: true

# failover node
-
  name: failover_node
  actions:
    -
      image: sequoiatools/couchbase-cli
      command: "failover -c {{.Orchestrator}}:{{.RestPort}}
          --server-failover $0:{{.RestPort}}
          -u  {{.RestUsername}} -p  {{.RestPassword}}"
      wait: true

# failover node with --force
-
  name: failover_node_forced
  actions:
    -
      image: sequoiatools/couchbase-cli
      command: "failover -c {{.Orchestrator}}:{{.RestPort}}
          --server-failover $0:{{.RestPort}}
          -u  {{.RestUsername}} -p  {{.RestPassword}} --force"
      wait: true

# recover a node
# $0 = node to recover
# $1 = recovery type, delta or full
-
  name: recover_node
  actions:
    -
      image: sequoiatools/couchbase-cli
      command: "recovery -c {{.Orchestrator}}:{{.RestPort}}
          --server-recovery $0:{{.RestPort}}
          --recovery-type $1
          -u  {{.RestUsername}} -p  {{.RestPassword}}"

# failover node and recover then rebalance
# $0 = node to failover
# $1 = recovery type, delta or full
-
  name: failover_and_recover
  actions:
    -
      template: failover_node
      args: "$0"
      wait: true
    -
      template: recover_node
      args: "$0, $1"
      wait: true
    -
      template: rebalance

-
  name: rebalance_stop
  actions:
    -
      image: sequoiatools/couchbase-cli
      command:  "rebalance-stop -c  {{.Orchestrator}}:{{.RestPort}}
                -u  {{.RestUsername}} -p  {{.RestPassword}}"
      wait: true

# !!!depreciated - use rebalance with optional arg!!!
# rebalance the cluster by IP
# $0 = server to rebalance
-
  name: rebalance_by_ip
  actions:
    -
      image: sequoiatools/couchbase-cli
      command:  "rebalance -c  $0:{{.RestPort}}
                -u  {{.RestUsername}} -p  {{.RestPassword}}"
      condwait: "{{if eq `windows` .Platform }}
                    false
                 {{end}}"
    -
      # windows requires special status watching
      requires: "{{ eq `windows` .Platform}}"
      template: wait_for_rebalance

-
# Enable autofailover on cluster
# $0 = Timeout for autofailover
  name: enable_autofailover
  actions:
    -
      image: sequoiatools/couchbase-cli
      command: "setting-autofailover -c  {{.Orchestrator}}:{{.RestPort}}
                -u  {{.RestUsername}} -p  {{.RestPassword}}
                --enable-auto-failover=1 --auto-failover-timeout=$0"
      wait: true

-
# Disable autofailover setting for cluster
  name: disable_autofailover
  actions:
    -
      image: sequoiatools/couchbase-cli
      command: "setting-autofailover -c  {{.Orchestrator}}:{{.RestPort}}
                -u  {{.RestUsername}} -p  {{.RestPassword}}
                --enable-auto-failover=0"
      wait: true

-
# Fail a node by killing the memcached
# $0 = Server to fail
  name: memcached_kill
  actions:
    -
      image: "vijayviji/sshpass"
      command: "sshpass -p {{.SSHPassword}} ssh -o StrictHostKeyChecking=no
                  {{.SSHUsername}}@$0 kill -SIGSTOP $(pgrep memcached)"

-
# Restart memcached process on server
# $0 = Server where memcached has to be started
  name: start_memcached
  actions:
    -
      image: "vijayviji/sshpass"
      command: "sshpass -p {{.SSHPassword}} ssh -o StrictHostKeyChecking=no
                  {{.SSHUsername}}@$0 kill -SIGCONT $(pgrep memcached)"

-
# Enable autofailover and fail a node. Recover the node and disable
# autofailover
# $0 = node to fail
# $1 = Autofailover timeout
# $2 = Recovery type
  name: autofailover
  actions:
    -
      template: enable_autofailover
      args: "$1"
      wait: true
    -
      template: memcached_kill
      args: "$0"
      wait: true
    -
      image: sequoiatools/cmd
      entrypoint: sleep
      wait: true
      duration: 60
    -
      template: start_memcached
      args: "$0"
      wait: true
    -
      image: sequoiatools/cmd
      entrypoint: sleep
      wait: true
      duration: 30
    -
      template: recover_node
      args: "$0, $2"
      wait: true
    -
      template: rebalance
      wait: true
    -
      template: disable_autofailover
      wait: true